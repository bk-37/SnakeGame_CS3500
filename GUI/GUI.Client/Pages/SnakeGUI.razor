@page "/snake"
@rendermode InteractiveServer
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using System.Numerics
@using System.Diagnostics
@using System.Text.Json
@using CS3500.Networking
@using GUI.Client.Controllers
@inject IJSRuntime JsRuntime;

<PageTitle> Snake </PageTitle>

<!-- Game UI -->
<div id="gameContainer" style="width: 100%; height: 100%; display: flex; flex-direction: column;">
    <!-- Controls Section -->
    <div id="controls" style="text-align: center; padding: 10px; background-color: #f4f4f4; z-index: 10;">
        <input type="text" placeholder="Enter Player Name" @bind="playerName" style="margin: 5px;" />
        <input type="text" placeholder="Server Address" @bind="serverAddress" style="margin: 5px;" />
        <input type="text" placeholder="Port" @bind="port" style="margin: 5px;" />
        <button @onclick="connectToServer" style="margin: 5px;">Connect</button>
    </div>

    <!-- Game Canvas -->
    <div id="snakeCanvas" style="position: fixed; width: 100%; height: 100%">
        <BECanvas Width="1000" Height="1000" @ref="canvasReference"></BECanvas>
    </div>
</div>

@code{
    private BECanvasComponent canvasReference = null!;
    private Canvas2DContext context = null!;
    private IJSObjectReference jsModule = null!;

    private string playerName = string.Empty;
    private string serverAddress = "localhost";
    private int port = 11000;
    private NetworkConnection? Connection;
    private NetworkController? Controller;
    private bool isConnected = false;



    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        if ( firstRender )
        {
            jsModule = await JsRuntime.InvokeAsync<IJSObjectReference>( "import", "./Pages/SnakeGUI.razor.js" );
            context = await canvasReference.CreateCanvas2DAsync();
            await JsRuntime.InvokeAsync<object>( "initRenderJS", DotNetObjectReference.Create( this ) );           

            // TODO: Start the game loop

            // in the meantime, draw something to initialize the canvas
            // you may want to remove this after you are drawing something
            // await context.SetFillStyleAsync( "lightblue" );
            // await context.FillRectAsync( 0, 0, 1000, 1000 );
            // await context.DrawImageAsync(backgroundImage, -world.Width / 2, -world.Height / 2, world.Width, world.Height);
        }
    }

    private async Task connectToServer()
    {
        try
        {
            Connection = new NetworkConnection();
            Controller = new(Connection);
            Debug.WriteLine("Initialized from connectToServer()");
            await Controller.ConnectToServer(playerName, serverAddress, port);
            isConnected = true;
            Debug.WriteLine("ConnectToServer() connected");
        }
        catch(Exception ex)
        {
            isConnected = false;
            Debug.WriteLine($"ConnectToServer(): {ex.Message}");
        }

    }


    [JSInvokable]
    public void HandleKeyPress( string key )
    {
        // TODO: Once the client is connected and the handshake is complete,
        //       invoke some controller method to send the appropriate command to the server
        Debug.WriteLine("key pressed: " + key);
        if (Controller != null)
        {
            Controller.HandleKey(key);
        }
        else { Debug.WriteLine("HandleKeyPress(): controller null"); }
    }
}

