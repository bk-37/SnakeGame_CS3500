@page "/snake"
@rendermode InteractiveServer
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using System.Numerics
@using System.Diagnostics
@using System.Text.Json
@using CS3500.Networking
@using GUI.Client.Controllers
@using GUI.Client.Models
@inject IJSRuntime JsRuntime;

<PageTitle> Snake </PageTitle>
<img @ref="backgroundImage" id="bgImage" src="images/Background.png" alt="image" style="display:none;" />
<img @ref="wallImage" id="bgImage" src="images/WallSprite.png" alt="image" style="display:none;" />
<!-- Game UI -->
<div id="gameContainer" style="width: 100%; height: 100%; display: flex; flex-direction: column;">
    <!-- Controls Section -->
    <div id="controls" style="text-align: center; padding: 10px; background-color: #f4f4f4; z-index: 10;">
        <input type="text" placeholder="Enter Player Name" @bind="playerName" style="margin: 5px;" />
        <input type="text" placeholder="Server Address" @bind="serverAddress" style="margin: 5px;" />
        <input type="text" placeholder="Port" @bind="port" style="margin: 5px;" />
        <button @onclick="connectToServer" style="margin: 5px;">Connect</button>
    </div>

    <!-- Game Canvas -->
    <div id="snakeCanvas" style="position: fixed; width: 100%; height: 100%">
        <BECanvas Width="1000" Height="1000" @ref="canvasReference"></BECanvas>
    </div>
</div>

@code{
    private BECanvasComponent canvasReference = null!;
    private Canvas2DContext context = null!;
    private IJSObjectReference jsModule = null!;
    private string playerName = string.Empty;
    private string serverAddress = "localhost";
    private int port = 11000;
    private NetworkController Controller = new();
    private ElementReference backgroundImage;
    private const int viewSize = 1000;
    private Point2D head;
    private ElementReference wallImage;


    protected override async Task OnAfterRenderAsync( bool firstRender )
    {

        if ( firstRender )
        {
            jsModule = await JsRuntime.InvokeAsync<IJSObjectReference>( "import", "./Pages/SnakeGUI.razor.js" );
            context = await canvasReference.CreateCanvas2DAsync();
            await JsRuntime.InvokeAsync<object>( "initRenderJS", DotNetObjectReference.Create( this ) );
            GameLoop();
            await context.DrawImageAsync(backgroundImage, 0, 0, viewSize, viewSize);

        }
    }

    private void connectToServer()
    {
        try
        {
            Controller.ConnectToServer(playerName, serverAddress, port);
            Debug.WriteLine("ConnectToServer() connected");
        }
        catch(Exception ex)
        {
            Debug.WriteLine($"ConnectToServer(): {ex.Message}");
        }

    }


    [JSInvokable]
    public void HandleKeyPress( string key )
    {
        if (Controller.connection.IsConnected)
        {
            Controller.HandleKey(key);
        }
    }

    private async void GameLoop()
    {
        while (!Controller.connection.IsConnected)
        {
            await Task.Delay(100);
        }
        Controller.ReadServerMessageAsync();
        while (Controller.connection.IsConnected)
        {
            await DrawFrame();
            await Task.Delay(20);
        }

    }

    private async Task DrawFrame()
    {
        World? WorldCopy = null;
        if(Controller != null)
        {
            lock(Controller.world)
            {
                WorldCopy = new World(Controller.world);
            }
        }
        //get our snake
        WorldCopy.snakes.TryGetValue(Controller.id, out Snake? playerSnake);
        //update the head point
        if (playerSnake != null)
            head = playerSnake.body.LastOrDefault(new Point2D(0, 0));
        await context.BeginBatchAsync();
        //draw a background to reset the edges
        await context.SetFillStyleAsync("cyan");
        await context.FillRectAsync(0, 0, viewSize, viewSize);
        // clip the view so that objects drawn outside the canvas will not be shown
        await context.BeginPathAsync();
        await context.RectAsync(0, 0, viewSize, viewSize);
        await context.ClipAsync();

        // Because we are modifying the transformation matrix, we need to save it so we can restore it at the end
        await context.SaveAsync();

        // Center on origin, move to center of view port
        await context.TranslateAsync(viewSize / 2, viewSize / 2);
        if(head != null)
            await context.TranslateAsync(-head.X, -head.Y);
        // Draw the background:
        if (WorldCopy != null)
        {
            await context.DrawImageAsync(backgroundImage, -WorldCopy.WorldSize / 2, -WorldCopy.WorldSize / 2, WorldCopy.WorldSize, WorldCopy.WorldSize);
            //loop through walls and draw them
            foreach(Wall wall in WorldCopy.walls)
            {
                await wall.Draw(context, wallImage);
            }
            //draw powerups
            foreach(Power powerup in WorldCopy.powerups.Values)
            {
                await powerup.Draw(context);
            }
            //draw snakes
            foreach (Snake snakes in WorldCopy.snakes.Values)
            {
                await snakes.Draw(context);
            }

        }
        //restore the transformation matrix
        await context.RestoreAsync();
        //finish batch drawing
        await context.EndBatchAsync();
        StateHasChanged();
    }
}

